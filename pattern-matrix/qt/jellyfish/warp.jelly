;; -*- mode: scheme; -*-
(let ((vertex positions-start)
      (warp-end 0)
      (warp-position (vector 0 0 0))
      (v 0)
      (weft-t 0)
      (draft-pos 0)
      (draft-size 4)
      (last-t 0)
      (draft-addr (+ normals-start 10)))

      ;;(trace (addr draft-size))

      (define build-quad
        (lambda (tl size)
          (write! vertex
                  tl (+ tl size)
                  (+ tl (*v size (vector 1 0 0)))
                  tl (+ tl size)
                  (+ tl (*v size (vector 0 1 0))))
          (set! vertex (+ vertex 6))))

      ;; like weft but don't need to take account of direction
      (define read-draft
        (lambda ()
          (read (+ draft-addr
                   (+ (* draft-pos draft-size)
                      (modulo (+ warp-end 1)
                              (+ draft-size (vector 0 1 1)) ))))))

      (define animate-shed
        (lambda (i)
          (set! v (if (< weft-t 0.2)
                      (vector 0 0 0.1)
                      (if (> weft-t 0.8)
                          (vector 0 0 -0.1)
                          (vector 0 0 0))))
          (set! warp-end 0)
          (loop (< warp-end 20)
                (when (< (read-draft) 0.5)
                      (write-add! (- i 6) 0 v 0 0 v v
                                  v 0 v v))
                (set! i (+ i 24))
                (set! warp-end (+ warp-end 1)))))

      (define build-warp
        (lambda ()
          (set! vertex positions-start)
          ;; build 4 segments X warp-ends
          (set! warp-end 0)
          (loop (< warp-end 20)
                (set! warp-position (+ (vector -19 -35.5 0)
                                       (* (vector 2 0 0) warp-end)))
                (build-quad warp-position (vector 1.7 35 0))
                (build-quad (+ warp-position (vector 0 35 0)) (vector 1.7 10 0))
                (build-quad (+ warp-position (vector 0 45 0)) (vector 1.7 15 0))
                (build-quad (+ warp-position (vector 0 60 0)) (vector 1.7 25 0))
                (set! warp-end (+ warp-end 1)))))

      (build-warp)
      (forever
       (set! vertex (+ positions-start 12))

       (when (> last-t weft-t)
             (build-warp))
       (set! last-t weft-t)

       (when (< weft-t 1)
             (animate-shed vertex)
             (set! weft-t (+ weft-t 0.007)))

       ))
